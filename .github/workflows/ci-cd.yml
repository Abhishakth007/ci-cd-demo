name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
           python-version: "3.12.3"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install production requirements + pytest for testing
          pip install flask pytest

      - name: Run Tests
        run: |
          # Simple import test - replace with actual pytest when you have tests
          python -c "import flask; print('Flask import successful')"
          # Uncomment when you have real tests: pytest

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Copy code to EC2
      - name: Copy Code to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          source: "app.py,requirements.txt"
          target: "ci-cd-demo"
          overwrite: true

      # Deploy and Restart Flask App
      - name: Deploy and Restart Flask
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          command_timeout: 60s
          script: |
            set -e  # Exit on any error
            echo "üöÄ Starting deployment..."
            cd ~/ci-cd-demo

            # Create virtual environment if it doesn't exist
            if [ ! -d "myenv" ]; then
              echo "üì¶ Creating virtual environment..."
              python3 -m venv myenv
            fi

            # Activate virtual environment
            echo "üêç Activating virtual environment..."
            source myenv/bin/activate

            # Install/update dependencies
            echo "üì¶ Installing dependencies..."
            pip install -r requirements.txt

            # Stop existing Flask processes more aggressively
            echo "üõë Stopping existing Flask app..."
            pkill -f "python.*app.py" || true
            pkill -f "screen.*flask_app" || true
            screen -wipe || true
            
            # Wait for cleanup
            sleep 2

            # Start Flask app using nohup instead of screen
            echo "üöÄ Starting Flask app with nohup..."
            cd ~/ci-cd-demo
            source myenv/bin/activate
            nohup python app.py > flask.log 2>&1 &
            
            # Get the PID and save it
            FLASK_PID=$!
            echo $FLASK_PID > flask.pid
            echo "Flask started with PID: $FLASK_PID"

            # Wait and verify
            sleep 8

            # Check if process is still running
            if kill -0 $FLASK_PID 2>/dev/null; then
              echo "‚úÖ Flask process is running (PID: $FLASK_PID)"
              
              # Test if app responds
              for i in {1..10}; do
                if curl -s --connect-timeout 5 localhost:5000 >/dev/null 2>&1; then
                  echo "‚úÖ Flask app is responding on port 5000"
                  
                  # Quick test of routes
                  HOME_TEST=$(curl -s localhost:5000/ 2>/dev/null || echo "failed")
                  ABOUT_TEST=$(curl -s localhost:5000/about 2>/dev/null || echo "failed")
                  
                  echo "üè† Home route: $HOME_TEST"
                  echo "‚ÑπÔ∏è  About route: $ABOUT_TEST"
                  echo "üéâ Deployment completed successfully!"
                  exit 0
                fi
                echo "Waiting for Flask to respond... ($i/10)"
                sleep 2
              done
              
              echo "‚ùå Flask started but not responding after 20 seconds"
              cat flask.log || true
              exit 1
            else
              echo "‚ùå Flask process died immediately"
              cat flask.log || true
              exit 1
            fi