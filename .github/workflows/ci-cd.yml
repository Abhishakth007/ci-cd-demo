name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          # Simple import test - replace with actual pytest when you have tests
          python -c "import flask; print('Flask import successful')"
          # Uncomment when you have real tests: pytest

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Copy code to EC2
      - name: Copy Code to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          source: "."
          target: "ci-cd-demo"
          overwrite: true

      # Deploy and Restart Flask App
      - name: Deploy and Restart Flask
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          command_timeout: 30s
          script: |
            echo "🚀 Starting deployment..."
            cd ~/ci-cd-demo

            # Activate virtual environment
            source myenv/bin/activate

            # Install/update dependencies
            echo "📦 Installing dependencies..."
            pip install -r requirements.txt

            # Stop existing Flask processes
            echo "🛑 Stopping existing Flask app..."
            pkill -f "python.*app.py" || true
            screen -S flask_app -X quit || true

            # Wait for processes to cleanup
            sleep 3

            # Start Flask app in screen session
            echo "🚀 Starting new Flask app..."
            screen -dmS flask_app bash -c "cd ~/ci-cd-demo && source myenv/bin/activate && python app.py"

            # Wait and verify deployment
            sleep 5

            # Check if Flask is running
            if ps aux | grep -q "[p]ython.*app.py"; then
              echo "✅ Flask process is running"
              
              # Test if app responds
              if curl -s --connect-timeout 10 localhost:5000 > /dev/null; then
                echo "✅ Flask app is responding on port 5000"
                echo "🌐 App accessible at: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):5000"
                
                # Test the new /about route
                if curl -s --connect-timeout 5 localhost:5000/about | grep -q "Testing CI"; then
                  echo "✅ /about route is working with new code!"
                else
                  echo "⚠️ /about route might need a moment to load"
                fi
              else
                echo "❌ Flask app not responding yet - check logs"
                screen -S flask_app -X hardcopy /tmp/flask.log || true
                cat /tmp/flask.log || true
                exit 1
              fi
            else
              echo "❌ Flask process not found"
              echo "📋 Debug info:"
              screen -list || true
              ps aux | grep python || true
              exit 1
            fi

            echo "🎉 Deployment completed successfully!"