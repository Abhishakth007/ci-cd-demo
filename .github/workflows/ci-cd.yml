name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          # Create a simple test if you don't have pytest tests yet
          python -c "import flask; print('Flask import successful')"
          # Uncomment when you have actual tests: pytest

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Copy code to EC2
      - name: Copy Code to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          source: "."
          target: "ci-cd-demo"
          overwrite: true

      # Deploy and Start Flask
      - name: Deploy and Start Flask
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          command_timeout: 30s
          script: |
            echo "🔍 Current working directory: $(pwd)"
            echo "📁 Contents: $(ls -la)"
            
            cd ~/ci-cd-demo
            echo "📁 Project directory contents: $(ls -la)"
            
            # Check if virtual environment exists
            if [ ! -d "myenv" ]; then
              echo "❌ Virtual environment 'myenv' not found!"
              exit 1
            fi
            
            echo "✅ Found virtual environment"
            
            # Install screen if not installed
            if ! command -v screen &> /dev/null; then
              echo "📦 Installing screen..."
              sudo apt update && sudo apt install -y screen
            fi
            
            # Activate virtual environment and install dependencies
            source myenv/bin/activate
            echo "🐍 Python path: $(which python)"
            echo "📦 Installing dependencies..."
            pip install -r requirements.txt
            
            # Kill any existing Flask processes
            echo "🔪 Stopping existing Flask processes..."
            pkill -f "python.*app.py" || true
            screen -S flask_app -X quit || true
            
            # Wait for cleanup
            sleep 2
            
            # Start Flask app in screen session
            echo "🚀 Starting Flask app in screen session..."
            screen -dmS flask_app bash -c "cd ~/ci-cd-demo && source myenv/bin/activate && python app.py"
            
            # Wait and verify
            sleep 3
            
            if screen -list | grep -q "flask_app"; then
              echo "✅ Flask app is running in screen session!"
              echo "📋 Active screen sessions:"
              screen -list
              
              # Test if the app is responding
              if curl -s localhost:5000 > /dev/null; then
                echo "🌐 Flask app is responding on port 5000"
              else
                echo "⚠️  Flask app started but not responding yet (may need a moment)"
              fi
            else
              echo "❌ Failed to start Flask app in screen"
              echo "🔍 Debug info:"
              ps aux | grep python || true
              exit 1
            fi